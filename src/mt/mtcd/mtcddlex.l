/** 
 *  Copyright (c) 1999~2017, Altibase Corp. and/or its affiliates. All rights reserved.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License, version 3,
 *  as published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
 

/***********************************************************************
 * $Id: mtddl.l 37587 2010-01-06 06:11:10Z msg2me $
 **********************************************************************/

/***********************************************************************
 * ATTENTION : 
 ***********************************************************************
 * BUG-14591
 * This file must be generated by flex 2.5.33 with -R option in V880
 * If you update mtddl.l, please follow this procedure.
 1) make genclean
 2) make genflex
 3) commit mtddl.l
 4) commit mtddl.cpp
 5) commit ../include/mtddlLexer.h
 **********************************************************************/
%option reentrant
%option 8bit
%option caseless
%option never-interactive
%option noreject
%option noyymore
%option noyywrap
%option nostdinit
%option prefix="mtddl"
%option header-file="mtcddlLexer.h"

%{
#include <mtce.h>
#include <mtcc.h>
#include <mtcd.h>
#include <mtcl.h>
#include <mtcdTypes.h>

#undef ECHO

%}

%%

AM          { 
                if( acpCStrCmp( yyget_text(yyscanner), "AM", 2 ) == 0 )
                {
                    return MTD_DATE_FORMAT_AM_U;
                }
                else if( acpCStrCmp( yyget_text(yyscanner), "Am", 2 ) == 0 )
                {
                    return MTD_DATE_FORMAT_AM_UL;
                }
                else if( ( acpCStrCmp( yyget_text(yyscanner), "aM", 2 ) == 0 ) ||
                         ( acpCStrCmp( yyget_text(yyscanner), "am", 2 ) == 0 ) )
                {
                    return MTD_DATE_FORMAT_AM_L;
                }
            }
SCC         {
                return MTD_DATE_FORMAT_SCC;
            }
CC          { 
                return MTD_DATE_FORMAT_CC;
            }
DAY         { 
                if( acpCStrCmp( yyget_text(yyscanner), "DAY", 3 ) == 0 )
                {
                    return MTD_DATE_FORMAT_DAY_U;
                }
                else if( acpCStrCmp( yyget_text(yyscanner), "Day", 3 ) == 0 )
                {
                    return MTD_DATE_FORMAT_DAY_UL;
                }
                else if( acpCStrCmp( yyget_text(yyscanner), "day", 3 ) == 0 )
                {
                    return MTD_DATE_FORMAT_DAY_L;
                }
            }
DDD         { 
                return MTD_DATE_FORMAT_DDD;
            }
DD          { 
                return MTD_DATE_FORMAT_DD;
            }
DY          { 
                if( acpCStrCmp( yyget_text(yyscanner), "DY", 2 ) == 0 )
                {
                    return MTD_DATE_FORMAT_DY_U;
                }
                else if( acpCStrCmp( yyget_text(yyscanner), "Dy", 2 ) == 0 )
                {
                    return MTD_DATE_FORMAT_DY_UL;
                }
                else if( acpCStrCmp( yyget_text(yyscanner), "dy", 2 ) == 0 )
                {
                    return MTD_DATE_FORMAT_DY_L;
                }
            }
D           { 
                return MTD_DATE_FORMAT_D;
            }
FF          {
                return MTD_DATE_FORMAT_FF;
            }
FM          {
                return MTD_DATE_FORMAT_FM;
            }
FF1         {
                return MTD_DATE_FORMAT_FF1;
            }
FF2         { 
                return MTD_DATE_FORMAT_FF2;
            }
FF3         { 
                return MTD_DATE_FORMAT_FF3;
            }
FF4         { 
                return MTD_DATE_FORMAT_FF4;
            }
FF5         { 
                return MTD_DATE_FORMAT_FF5;
            }
FF6         { 
                return MTD_DATE_FORMAT_FF6;
            }
HH          { 
                return MTD_DATE_FORMAT_HH;
            }
HH12        { 
                return MTD_DATE_FORMAT_HH12;
            }
HH24        { 
                return MTD_DATE_FORMAT_HH24;
            }
MI          { 
                return MTD_DATE_FORMAT_MI;
            }
MM          { 
                return MTD_DATE_FORMAT_MM;
            }
MON         { 
                if( acpCStrCmp( yyget_text(yyscanner), "MON", 3 ) == 0 )
                {
                    return MTD_DATE_FORMAT_MON_U;
                }
                else if( acpCStrCmp( yyget_text(yyscanner), "Mon", 3 ) == 0 )
                {
                    return MTD_DATE_FORMAT_MON_UL;
                }
                else if( acpCStrCmp( yyget_text(yyscanner), "mon", 3 ) == 0 )
                {
                    return MTD_DATE_FORMAT_MON_L;
                }
            }
MONTH       { 
                if( acpCStrCmp( yyget_text(yyscanner), "MONTH", 5 ) == 0 )
                {
                    return MTD_DATE_FORMAT_MONTH_U;
                }
                else if( acpCStrCmp( yyget_text(yyscanner), "Month", 5 ) == 0 )
                {
                    return MTD_DATE_FORMAT_MONTH_UL;
                }
                else if( acpCStrCmp( yyget_text(yyscanner), "month", 5 ) == 0 )
                {
                    return MTD_DATE_FORMAT_MONTH_L;
                }
            }
PM          { 
                if( acpCStrCmp( yyget_text(yyscanner), "PM", 2 ) == 0 )
                {
                    return MTD_DATE_FORMAT_PM_U;
                }
                else if( acpCStrCmp( yyget_text(yyscanner), "Pm", 2 ) == 0 )
                {
                    return MTD_DATE_FORMAT_PM_UL;
                }
                else if( ( acpCStrCmp( yyget_text(yyscanner), "pM", 2 ) == 0 ) ||
                         ( acpCStrCmp( yyget_text(yyscanner), "pm", 2 ) == 0 ) )
                {
                    return MTD_DATE_FORMAT_PM_L;
                }
            }
Q           { 
                return MTD_DATE_FORMAT_Q;
            }
RM          { 
                if( ( acpCStrCmp( yyget_text(yyscanner), "RM", 2 ) == 0 ) ||
                    ( acpCStrCmp( yyget_text(yyscanner), "Rm", 2 ) == 0 ) )
                {
                    return MTD_DATE_FORMAT_RM_U;
                }
                else if( ( acpCStrCmp( yyget_text(yyscanner), "rM", 2 ) == 0 ) ||
                         ( acpCStrCmp( yyget_text(yyscanner), "rm", 2 ) == 0 ) )
                {
                    return MTD_DATE_FORMAT_RM_L;
                }
            }
RRRR        { 
                return MTD_DATE_FORMAT_RRRR;
            }
RR          { 
                return MTD_DATE_FORMAT_RR;
            }
SSSSSSSS    { 
                return MTD_DATE_FORMAT_SSSSSSSS;
            }
SSSSSS      { 
                return MTD_DATE_FORMAT_SSSSSS;
            }
SSSSS       { 
                return MTD_DATE_FORMAT_SSSSS;
            }
SS          { 
                return MTD_DATE_FORMAT_SS;
            }
IW          {
                return MTD_DATE_FORMAT_IW;
            }
IYYY        {
                return MTD_DATE_FORMAT_IYYY;
            }
IYY         {
                return MTD_DATE_FORMAT_IYY;
            }
IY          {
                return MTD_DATE_FORMAT_IY;
            }
I           {
                return MTD_DATE_FORMAT_I;
            }
WW2         {
                return MTD_DATE_FORMAT_WW2;
            }
WW          { 
                return MTD_DATE_FORMAT_WW;
            }
W           { 
                return MTD_DATE_FORMAT_W;
            }
SYYYY       {
                return MTD_DATE_FORMAT_SYYYY;
            }
Y,YYY       { 
                return MTD_DATE_FORMAT_YCYYY;
            }
YYYY        { 
                return MTD_DATE_FORMAT_YYYY;
            }
YYY         { 
                return MTD_DATE_FORMAT_YYY;
            }
YY          { 
                return MTD_DATE_FORMAT_YY;
            }
Y           { 
                return MTD_DATE_FORMAT_Y;
            }

\"[^\"]*\"  {
                return MTD_DATE_FORMAT_DOUBLE_QUOTE_STRING;
            }

[-/,.:;\'\n\r\t !#$%()*+\\<=>?@\[\]\^_`{}|~]+ {
                return MTD_DATE_FORMAT_SEPARATOR;
            }

.           { 
                return MTD_DATE_FORMAT_NONE;
            }
%%
