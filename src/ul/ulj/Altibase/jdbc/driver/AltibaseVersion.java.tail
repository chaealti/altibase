
    public static final int    ALTIBASE_MAJOR_VERSION    = ALTIBASE_VERSION_VALUES[0];
    public static final int    ALTIBASE_MINOR_VERSION    = ALTIBASE_VERSION_VALUES[1];
    public static final int    ALTIBASE_DEV_VERSION      = ALTIBASE_VERSION_VALUES[2];
    public static final int    ALTIBASE_PATCHSET_VERSION = ALTIBASE_VERSION_VALUES[3];
    public static final int    ALTIBASE_PATCH_VERSION    = ALTIBASE_VERSION_VALUES[4];

    public static final byte   CM_MAJOR_VERSION          = CM_VERSION_VALUES[0];
    public static final byte   CM_MINOR_VERSION          = CM_VERSION_VALUES[1];
    public static final byte   CM_PATCH_VERSION          = CM_VERSION_VALUES[2];
    public static final String CM_VERSION_STRING         = CM_MAJOR_VERSION + "." + CM_MINOR_VERSION + "." + CM_PATCH_VERSION;

    public static final long   CM_PROTOCOL_VERSION       = ((long) CM_MAJOR_VERSION << 48L)
                                                         | ((long) CM_MINOR_VERSION << 32L)
                                                         | ((long) CM_PATCH_VERSION);

    private static final String  JAVA_VERSION_PATTERN_REGEX = "(?:openjdk|java) version ([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:[\\._]([0-9]+))?";
    private static final Pattern JAVA_VERSION_PATTERN       = Pattern.compile(JAVA_VERSION_PATTERN_REGEX);
    private static final int     JAVA_MAJOR_VERSION;
    private static final int     JAVA_MINOR_VERSION;
    private static final int     JAVA_PATCH_VERSION;
    private static final int     JAVA_BUILD_VERSION;

    private static final String  JDK_VERSION_STRING;

    static
    {
        Matcher m = JAVA_VERSION_PATTERN.matcher(JAVA_VERSION);
        if (m.matches())
        {
            JAVA_MAJOR_VERSION = Integer.parseInt( m.group(1) );
            JAVA_MINOR_VERSION = Integer.parseInt( m.group(2) );
            JAVA_PATCH_VERSION = Integer.parseInt( m.group(3) );
            JAVA_BUILD_VERSION = (m.group(4) != null) ? Integer.parseInt( m.group(4) ) : 0;

            if (JAVA_MAJOR_VERSION == 1 && JAVA_MINOR_VERSION >= 5)
            {
                JDK_VERSION_STRING = String.valueOf( JAVA_MINOR_VERSION );
            }
            else
            {
                JDK_VERSION_STRING = JAVA_MAJOR_VERSION + "." + JAVA_MINOR_VERSION;
            }
        }
        else
        {
            JAVA_MAJOR_VERSION = JAVA_MINOR_VERSION = JAVA_PATCH_VERSION = JAVA_BUILD_VERSION = 0;
            JDK_VERSION_STRING = "?";
        }
    }

    public static void main(String[] args)
    {
        System.out.println("Altibase " + ALTIBASE_VERSION_STRING
                           + " with CMP " + CM_VERSION_STRING
                           + " for JDBC 4.2"
                           + (TraceFlag.TRACE_COMPILE ? " trace" : "")
                           + " compiled with JDK " + JDK_VERSION_STRING + "(sharding included)");
    }
}
