#
# Copyright 2011, Altibase Corporation or its subsidiaries.
# All rights reserved.
#
include $(ALTIDEV_HOME)/env.mk
include $(ALTIDEV_HOME)/alticore.mk
include adapter_objs.mk
# for distribution
#REVISION = `svn up | cut -d" " -f"2 3"`
#REVISION = `svn info | head -5 | tail -1 | cut -d" " -f2`
#RELEASE_ORA_ADAPTER_DIST_NAME=oraAdapter-$(OS_TARGET)$(OS_MAJORVER)$(OS_MINORVER)-$(COMPILER_NAME)-$(BUILD_MODE)-$(REVISION)
RELEASE_VERSION=$(shell $(ALTI_HOME)/bin/genErrMsg -k|awk -F'-' '{print $$3}')
PLATFORM_INFO=$(ALTI_CFG_OS)-$(ALTI_CFG_CPU)-$(ALTI_CFG_BITTYPE)bit
RELEASE_ORA_ADAPTER_DIST_NAME=altibase-oraAdapter-$(RELEASE_VERSION)-$(PLATFORM_INFO)-$(BUILD_MODE)
ORA_ADAPTER_INSTALLER_XML=oraAdapter.xml

# for Adapter for Oracle
INCLUDES += $(IDROPT). $(IDROPT)./msg $(IDROPT)./version 

# For linking dynamic library
LIBDIRS += $(LDROPT)$(ALTI_HOME)/lib $(LDROPT).
# For linking static library

ifeq "$(ALTI_CFG_OS)" "WINDOWS"
LIBS_DYNAMIC += $(ALTI_HOME)/lib/ala.$(LIBEXT) $(ALTI_HOME)/lib/alticore_debug_static.$(LIBEXT) 
LIBS_STATIC += $(ALTI_HOME)/lib/ala.$(LIBEXT) $(ALTI_HOME)/lib/alticore_static.$(LIBEXT) 
else
LIBS_DYNAMIC += $(ALTI_HOME)/lib/libala.$(LIBEXT) $(ALTI_HOME)/lib/libalticore.$(LIBEXT) 
LIBS_STATIC += $(ALTI_HOME)/lib/libala.$(LIBEXT) $(ALTI_HOME)/lib/libalticore.$(LIBEXT) 
endif

ifeq "$(ALTI_CFG_OS)" "LINUX"
CFLAGS += -Werror
endif

# for ALTICORE
INCLUDES += $(ALTICORE_INCLUDES)
# For linking alticore dynamic library
#LFLAGS += $(ALTICORE_LDFLAGS)

# for ALA
INCLUDES += $(IDROPT)$(ALTIDEV_HOME)/src/ul/include

# for OCI
ifeq "$(ALTI_CFG_OS)" "WINDOWS"
	ifeq "$(ALTI_CFG_BITTYPE)" "64"
		INCLUDES += $(IDROPT)./include/window64_include
		LIBDIRS += $(LDROPT)./lib/window64_lib $(LDROPT).
		#export LD_LIBRARY_PATH:=./lib/window64_lib:${LD_LIBRARY_PATH}
		LIBS_DYNAMIC += $(LIBOPT)oci.lib
		LIBS_STATIC += $(LIBOPT)oci.lib
	else # WINDOWS 32 bit
		INCLUDES += $(IDROPT)./include/window32_include
		LIBDIRS += $(LDROPT)./lib/window32_lib $(LDROPT).
		#export LD_LIBRARY_PATH:=./lib/window32_lib:${LD_LIBRARY_PATH}
		LIBS_DYNAMIC += $(LIBOPT)oci.dll
		LIBS_STATIC += $(LIBOPT)oci.dll
	endif
else
	ifeq "$(ALTI_CFG_OS)" "AIX"
		INCLUDES += $(IDROPT)./include/aix_include
		LIBDIRS += $(LDROPT)./lib/aix_lib $(LDROPT).
		export LD_LIBRARY_PATH:=./lib/aix_lib:${LD_LIBRARY_PATH}
		LIBS_DYNAMIC += $(LIBOPT)clntsh
		LIBS_STATIC += $(LIBOPT)clntst10 `cat ./lib/aix_lib/ldflags` `cat ./lib/aix_lib/sysliblist`
	else # LINUX
		ifeq "$(ALTI_CFG_BITTYPE)" "64"
			ifeq "$(OS_TARGET)" "POWERPC64LE_LINUX"
				INCLUDES += $(IDROPT)./include/powerlinux64_include
				LIBDIRS += $(LDROPT)./lib/powerlinux64_lib $(LDROPT).
				export LD_LIBRARY_PATH:=./lib/powerlinux64_lib:${LD_LIBRARY_PATH}
				LIBS_DYNAMIC += $(LIBOPT)clntsh
				LIBS_STATIC += $(LIBOPT)clntst12 `cat ./lib/powerlinux64_lib/ldflags` `cat ./lib/powerlinux64_lib/sysliblist`
			else
				INCLUDES += $(IDROPT)./include/linux64_include
				LIBDIRS += $(LDROPT)./lib/linux64_lib $(LDROPT).
				export LD_LIBRARY_PATH:=./lib/linux64_lib:${LD_LIBRARY_PATH}
				LIBS_DYNAMIC += $(LIBOPT)clntsh
				LIBS_STATIC += $(LIBOPT)clntst10 `cat ./lib/linux64_lib/ldflags` `cat ./lib/linux64_lib/sysliblist`
			endif
		else # LINUX 32 bit
			INCLUDES += $(IDROPT)./include/linux32_include
			LIBDIRS += $(LDROPT)./lib/linux32_lib $(LDROPT).
			export LD_LIBRARY_PATH:=./lib/linux32_lib:${LD_LIBRARY_PATH}
			LIBS_DYNAMIC += $(LIBOPT)clntsh
			LIBS_STATIC += $(LIBOPT)clntst10 `cat ./lib/linux32_lib/ldflags` `cat ./lib/linux32_lib/sysliblist`
		endif
	endif
endif

ifeq "$(ALTI_CFG_OS)" "WINDOWS"
INCLUDES += $(IDROPT)$(ORACLE_HOME)/oci/include 
LIBDIRS += $(LDROPT)$(ORACLE_HOME)/oci/lib/msvc
LIBS_DYNAMIC += $(LIBOPT)oci.lib
LIBS_STATIC += $(LIBOPT)oci.lib
else
INCLUDES += $(IDROPT)$(ORACLE_HOME)/rdbms/public 
# For linking dynamic library
LIBDIRS += $(LDROPT)$(ORACLE_HOME)/lib
LIBS_DYNAMIC += $(LIBOPT)clntsh
# For linking OCI static library
LIBS_STATIC += $(LIBOPT)clntst10 `cat $(ORACLE_HOME)/lib/ldflags` `cat $(ORACLE_HOME)/lib/sysliblist`
endif

OUT = oraAdapter$(BINEXT)

SRCS = $(ORA_ADAPTER_SRCS)

OBJS = $(ORA_ADAPTER_OBJS)

all: build

build: build_msg $(OBJS)
	$(LD) $(OBJS) $(INCLUDES) $(LIBDIRS) $(LFLAGS) $(LDOUT)$(OUT) $(LIBS_DYNAMIC) $(LIBS) 
	rm -rf oraAdapter_home
	mkdir -p oraAdapter_home/msg/
	mkdir -p oraAdapter_home/bin/
	mkdir -p oraAdapter_home/conf/
	mkdir -p oraAdapter_home/trc/
	cp -f $(OUT) oraAdapter_home/bin/
	cp -f bin/oraoaUtility oraAdapter_home/bin/oaUtility
	cp -f bin/oraoaCheckConstraints oraAdapter_home/bin/oaCheckConstraints
	chmod +x oraAdapter_home/bin/oaUtility
	chmod +x oraAdapter_home/bin/oaCheckConstraints
	cp -f msg/msgEN82.mdl oraAdapter_home/msg/
	cp -f conf/oraAdapter.conf oraAdapter_home/conf/oraAdapter.conf
	cp -f conf/oalogin.sql oraAdapter_home/conf/oalogin.sql
	cp -f conf/ora_dbms_skip_error_include.list oraAdapter_home/conf/dbms_skip_error_include.list
	cp -f conf/ora_dbms_skip_error_exclude.list oraAdapter_home/conf/dbms_skip_error_exclude.list

build_static: build_msg $(OBJS)
	$(LD) $(OBJS) $(INCLUDES) $(LIBDIRS) $(LFLAGS) $(LDOUT)$(OUT) $(LIBS_STATIC) $(LIBS)
	cp -f $(OUT) bin/

$(OBJS): build_version

.c.o:
	$(COMPILE.c) $(LDOUT)$@ $< $(INCLUDES)

clean: clean_msg clean_version clean_test
	rm -f $(OUT)
	rm -f $(OBJS)
	rm -rf oraAdapter_home
	rm -rf dist

# for version file
build_version:
	$(MAKE) -C version -f Makefile.ora build

clean_version:
	$(MAKE) -C version -f Makefile.ora clean

# for message file
build_msg: msg/oaMsg.msg
	$(MAKE) -C msg build

clean_msg:
	$(MAKE) -C msg clean

dist:
	rm -rf dist
	mkdir -p dist/msg/
	mkdir -p dist/bin/
	mkdir -p dist/conf/
	mkdir -p dist/trc/
	cp -f oraAdapter_home/bin/$(OUT) dist/bin/
	cp -f oraAdapter_home/bin/oaUtility dist/bin/
	cp -f oraAdapter_home/bin/oaCheckConstraints dist/bin/
	chmod +x dist/bin/oaUtility
	chmod +x dist/bin/oaCheckConstraints
	cp -f oraAdapter_home/msg/msgEN82.mdl dist/msg/
	cp -f oraAdapter_home/conf/oraAdapter.conf dist/conf/oraAdapter.conf
	cp -f oraAdapter_home/conf/oalogin.sql dist/conf/oalogin.sql
	cp -f oraAdapter_home/conf/dbms_skip_error_include.list dist/conf/dbms_skip_error_include.list
	cp -f oraAdapter_home/conf/dbms_skip_error_exclude.list dist/conf/dbms_skip_error_exclude.list    
	builder build $(ORA_ADAPTER_INSTALLER_XML) --setvars oraadapter_filename=$(RELEASE_ORA_ADAPTER_DIST_NAME) oraadapter_version=$(RELEASE_VERSION)

#
# for test
#
TEST_OUT += oaConfigTest
TEST_OUT += oaLogTest
TEST_OUT += oaAlaReceiverTest
#TEST_OUT += oaAlaLogConverterTest
TEST_OUT += oaOciApplierTest
TEST_OUT += oaLogRecordTest

test: build_test
	./oaConfigTest
	./oaLogTest
#	./oaAlaReceiverTest
#	./oaAlaLogConverterTest
	./oaOciApplierTest
	./oaLogRecordTest

build_test: build_msg $(TEST_OUT)

clean_test:
	rm -f $(TEST_OUT)
	rm -f oaConfigTest.$(OBJEXT)
	rm -f oaLogTest.$(OBJEXT)
	rm -f oaAlaReceiverTest.$(OBJEXT)
	rm -f oaOciApplierTest.$(OBJEXT)
	rm -f oaLogRecordTest.$(OBJEXT)

oaConfigTest: oaConfigTest.$(OBJEXT) oaConfig.$(OBJEXT)
		$(LD) $+ $(LFLAGS) $(LDOUT)$@ $(LIBS)

oaLogTest: oaLogTest.$(OBJEXT) oaLog.$(OBJEXT) msg/oaMsg.$(OBJEXT)
		$(LD) $+ $(LFLAGS) $(LDOUT)$@ $(LIBS)

oaAlaReceiverTest: oaAlaReceiverTest.$(OBJEXT) oaAlaReceiver.$(OBJEXT) oaConfig.$(OBJEXT) oaAlaLogConverter.$(OBJEXT) oaLogRecord.$(OBJEXT) oaLog.$(OBJEXT) msg/oaMsg.$(OBJEXT) 
		$(LD) $+ $(LFLAGS) $(LDOUT)$@ $(LIBS)

oaAlaLogConverterTest: oaAlaLogConverterTest.$(OBJEXT) oaAlaLogConverter.$(OBJEXT)
		$(LD) $+ $(LFLAGS) $(LDOUT)$@ $(LIBS)

oaOciApplierTest: oaOciApplierTest.$(OBJEXT) oaOciApplier.$(OBJEXT) oaConfig.$(OBJEXT) oaLog.$(OBJEXT) msg/oaMsg.$(OBJEXT) 
		$(LD) $+ $(LFLAGS) $(LDOUT)$@ $(LIBS)

oaLogRecordTest: oaLogRecordTest.$(OBJEXT) oaLogRecord.$(OBJEXT)
		$(LD) $+ $(LFLAGS) $(LDOUT)$@ $(LIBS)

-include $(OBJS:.$(OBJEXT)=.d)
